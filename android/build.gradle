buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['customerio.reactnative.kotlinVersion']

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['customerio.reactnative.' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['customerio.reactnative.' + name]).toInteger()
}

def isNewArchitectureEnabled() {
  // Allow customers to override new architecture setting specifically for Customer.io SDK.
  // This is useful as a workaround for apps where the new architecture has issues.
  // Customers can add 'customerioNewArchEnabled=false' in their gradle.properties
  // to force the SDK to use old architecture even when their app has newArchEnabled=true.
  // This can be helpful for customers who are using the new architecture in their app, but are on older
  // versions of React Native than the one used by the SDK to generate the codegen files.
  if (project.hasProperty("customerioNewArchEnabled")) {
    return project.customerioNewArchEnabled == "true"
  }
  // Otherwise, use react-native's newArchEnabled property.
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

android {
  namespace = 'io.customer.reactnative.sdk'
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  defaultConfig {
    def isNewArchEnabled = isNewArchitectureEnabled()
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchEnabled.toString())
  }
  
  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        // Include both new architecture source directories and codegen generated files
        java.srcDirs += ['src/newarch', 'generated/java']
      } else {
        java.srcDirs += ['src/oldarch']
      }
    }
  }
}

repositories {
  mavenCentral()
  google()

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
            projectDir,
            '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
              parentDir,
              'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
              parentDir,
              'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url = androidPrebuiltBinaryDir.toString()
          name = androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url = androidSourcesDir.toString()
          name = androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

def kotlin_version = getExtOrDefault('kotlinVersion')
ext.cioAndroidSDKVersion = getExtOrDefault('cioSDKVersionAndroid')

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += [
                '-Xopt-in=kotlin.RequiresOptIn',
                '-Xopt-in=io.customer.base.internal.InternalCustomerIOApi',
        ]
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += [
                '-Xopt-in=kotlin.RequiresOptIn',
                '-Xopt-in=io.customer.base.internal.InternalCustomerIOApi',
        ]
    }
}

apply from: "./cio-core.gradle"

dependencies {
  // noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
